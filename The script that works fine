#include <Wire.h>
#include <ESP8266WiFi.h>; 
#include <PubSubClient.h>;

const char* ssid = "3301LAB";
const char* password = "33013415";
const char* mqttServer = "140.138.139.172";  // MQTT伺服器位址
const char* mqttUserName = "3627";  // 使用者名稱，隨意設定。
const char* mqttPwd = "3627";  // MQTT密碼
const char* clientID = "Jerry";      // 用戶端ID，隨意設定。
const char* topic = "windSensor/EnduranceTest";
 
unsigned long prevMillis = 0;  // 暫存經過時間（毫秒）
int delay_time = 15000; //每周期間隔(ms)
String msgStr = "";      // 暫存MQTT訊息字串

// retrieve  bytes turn it to int, bytes2 is highbyte, byte1 is lowbyte
int bytes_to_int(byte bytes1, byte bytes2){
  unsigned long combined = 0;
  combined = (bytes2 << 8) | (bytes1);
  return combined;
}

WiFiClient espClient;
PubSubClient client(espClient);

void setup_wifi() {
  delay(10);
 
  WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
 
  Serial.println("");
  Serial.println("WiFi connected");
}
 
void reconnect() {
  while (!client.connected()) {
    if (client.connect(clientID, mqttUserName, mqttPwd)) {
      Serial.println("MQTT connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);  // 等5秒之後再重試
    }
  }
}

void setup(){
Wire.begin();
//Wire.setClock(10000);
Serial.begin(9600);//9600
setup_wifi();
client.setServer(mqttServer, 1884);
Serial.println(client.setBufferSize(512)); //resize buffer to 512
Serial.println("\nI2C Scanner");
Serial.println("Scanning...");
}

void loop(){
byte error;
//int address_0 = 96 , address_2 = 98, address_4 = 100 , address_5 = 101, address_7 = 103, address_17 = 113, address_22 = 118, address_25 = 121;
int sensorAddress[] = {96, 98, 99, 101, 103, 113, 118, 121};
String sensorNumber[] = {"Sensor0: ", "Sensor2: ", "Sensor3: ", "Sensor5: ", "Sensor7: ", "Sensor17: ", "Sensor22: ", "Sensor25: "};
int message;

int allSensorsData[8];
// int Sensor0_data, Sensor2_data, Sensor4_data, Sensor5_data, Sensor7_data, Sensor17_data, Sensor22_data, Sensor25_data;
//Sensor #0 :96, Sensor #2 :98, Sensor #4 :100, Sensor #5 :101, Sensor #7 :103, Sensor #17 :113, Sensor #22 :118, Sensor #25 :121.
for (int sensorNum = 0;sensorNum < 8; sensorNum++ ){
byte byte1 = 1, byte2 = 0;
int message_index = 0;
Serial.println(sensorNumber[sensorNum]);
Wire.beginTransmission(sensorAddress[sensorNum]);
Wire.write(67);
Wire.endTransmission(false);
Wire.requestFrom(sensorAddress[sensorNum], 2);
while(Wire.available()){
if (message_index == 0){
byte1 = Wire.read();
Serial.println(byte1);
message_index ++;
}else if (message_index == 1){
byte2 = Wire.read();
Serial.println(byte2);
}
}

Serial.print("Wind Velocity (mm/s):");
allSensorsData[sensorNum] = bytes_to_int(byte1, byte2);
Serial.println(allSensorsData[sensorNum]);
}

//Serial.println("done\n");
delay(500); // wait 0.5 seconds before retrieveing next sensor reading
 
  // 組合MQTT訊息;
msgStr= msgStr + "{\"Sensor_0(mm/s)\":"+ (allSensorsData[0]+ 80) + ",\"Sensor_2(mm/s)\":" + (allSensorsData[1] + 81) + ",\"Sensor_4(mm/s)\":" + (allSensorsData[2] + 82) + ",\"Sensor_5(mm/s)\":" + (allSensorsData[3] + 83) + ",\"Sensor_7(mm/s)\":" + (allSensorsData[4] + 84) + ",\"Sensor_17(mm/s)\":" + (allSensorsData[5] + 85) + ",\"Sensor_22(mm/s)\":" + (allSensorsData[6] + 86) + ",\"Sensor_25(mm/s)\":" + (allSensorsData[7] + 87) + "}";
    
// 宣告字元陣列
byte arrSize = msgStr.length() + 1;
char msg[arrSize];


Serial.print("Publish message: ");
Serial.println(msgStr);
msgStr.toCharArray(msg, arrSize); // 把String字串轉換成字元陣列格式
//Serial.print("Topic bytes size:");
//Serial.println(sizeof(topic));
//Serial.print("message bytes size:");
//Serial.println(sizeof(msg));
bool pub_suc = client.publish(topic, msg);
while (!pub_suc){  // 發布MQTT主題與訊息
  Serial.println("MQTT disconnected, reconnecting...");
  if (!client.connected()) {
    reconnect();
  }
pub_suc = client.publish(topic, msg);
//Serial.println(pub_suc);
//Serial.println(WiFi.status());
delay(1000); // republish after 1 second.
}
client.loop();
msgStr = "";
delay(delay_time);
Serial.println("-----------------------------------New Cycle------------------------------------------------------");
}
